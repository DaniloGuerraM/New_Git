

Este código realiza peticiones HTTP (GET, PUT y POST) a un servidor utilizando HttpURLConnection. 
usando mockoom generaremos las apis de prueba


Un TextView (textView), que muestra resultados o mensajes.

Tres botones (buttonget, buttonput, buttonpost), cada uno asignado a realizar una solicitud HTTP (GET, PUT y POST respectivamente).

### Inicialización y Configuración en onCreate
En el método onCreate se define el comportamiento de los botones y se enlazan a los elementos de la interfaz (R.layout.activity_main):

Se establecen los tres botones: buttonget, buttonput, y buttonpost.
Cada botón tiene un listener que invoca el método chequear() con un parámetro específico, el cual determina si la solicitud será un GET, PUT o POST.

buttonget.setOnClickListener(v -> chequear("GET"));
buttonput.setOnClickListener(v -> chequear("PUT"));
buttonpost.setOnClickListener(v -> chequear("POST"));

### Verificación de Conectividad en chequear
El método chequear(String metodo) se encarga de comprobar si el dispositivo está conectado a Internet antes de realizar cualquier operación HTTP:

Utiliza ConnectivityManager para verificar la conexión a la red.
Si hay conexión, decide qué método (GET, PUT o POST) ejecutar.
Si no hay conexión, muestra un mensaje en el TextView indicando "No conectado".

### Solicitud GET
El método get() realiza una solicitud HTTP GET:

Llama a GetAPI(), una subclase de AsyncTask que maneja la operación en segundo plano.
La URL es pasada como argumento para obtener los datos.
Los resultados de la solicitud se muestran en el TextView.


La tarea en segundo plano (doInBackground) ejecuta la solicitud llamando al método doGetRequest().
Se maneja la conexión con HttpURLConnection, configurando el método GET.
Se procesa la respuesta del servidor (código y contenido).
El resultado se devuelve a onPostExecute, donde se actualiza el TextView.

urlConnection.setRequestMethod("GET");


### Solicitud PUT
El método put() realiza una solicitud HTTP PUT:

Llama a PutAPI(), otra subclase de AsyncTask, para enviar datos al servidor.
Envía un JSON como cuerpo de la solicitud PUT, en este caso un objeto JSON con el nombre "danilo".
Los resultados también se muestran en el TextView.
Detalles técnicos de PutAPI:

El método hacerPut() envía el contenido de jsonInputString a la URL usando OutputStream.
Configura la conexión para aceptar datos JSON (setRequestProperty("Content-Type", "application/json")).
Verifica el código de respuesta del servidor y devuelve los datos recibidos.

urlConnection.setRequestMethod("PUT");
urlConnection.setRequestProperty("Content-Type", "application/json");


### Solicitud POST
El método post() realiza una solicitud HTTP POST:

Similar a put(), pero utilizando PostAPI() para enviar datos a la URL designada.
Envía un JSON con el nombre "carlos" en el cuerpo de la solicitud.
Los resultados se muestran en el TextView.
Detalles de PostAPI:

Funciona igual que el PUT, pero el método HTTP configurado es POST.
Verifica si el código de respuesta es HTTP_OK o HTTP_CREATED.

urlConnection.setRequestMethod("POST");
urlConnection.setRequestProperty("Content-Type", "application/json");


Cada solicitud HTTP maneja posibles errores como problemas de red o respuestas inesperadas del servidor.
Los errores se registran en el log de Android (Log.d) y se capturan con bloques try-catch.
Si la solicitud falla, el texto del TextView se actualiza con "Error al realizar la solicitud".

Este código realizar solicitudes HTTP 
en Android utilizando AsyncTask para no bloquear el hilo principal de la interfaz de usuario. 
Implementa GET, PUT, y POST, lo que lo hace útil para interactuar con API RESTful.

Cada operación HTTP se maneja por separado y asegura que las operaciones en red se realicen de forma segura y asincrónica.





